import { readFileSync } from 'fs'
import { AIService } from './ai-service'

export class ScalarAIService {
    private aiService: AIService

    constructor(aiService: AIService) {
        this.aiService = aiService
    }

    async generateEnhancedDocs(openApiSpecPath: string): Promise<string> {
        // 1. Read OpenAPI spec generated by Scalar
        const openApiSpec = JSON.parse(readFileSync(openApiSpecPath, 'utf-8'))

        // 2. Transform OpenAPI spec to our AI format
        const aiInput = this.transformOpenApiToAIFormat(openApiSpec)

        // 3. Send to AI for enhanced documentation
        const enhancedDocs = await this.aiService.analyzeProject(aiInput)

        return enhancedDocs
    }

    private transformOpenApiToAIFormat(openApiSpec: any): any {
        const routes: any[] = []
        const controllers: any[] = []
        const services: any[] = []
        const types: any[] = []

        // Extract routes from OpenAPI paths
        Object.entries(openApiSpec.paths || {}).forEach(
            ([path, methods]: [string, any]) => {
                Object.entries(methods).forEach(
                    ([method, operation]: [string, any]) => {
                        routes.push({
                            path,
                            method: method.toUpperCase(),
                            handler: operation.operationId || 'unknown',
                            parameters: this.extractParameters(
                                operation.parameters || []
                            ),
                            responses: operation.responses || {},
                            summary: operation.summary || '',
                            description: operation.description || '',
                            tags: operation.tags || [],
                            framework: 'nestjs',
                            source: 'openapi',
                        })
                    }
                )
            }
        )

        // Extract types from OpenAPI components
        Object.entries(openApiSpec.components?.schemas || {}).forEach(
            ([name, schema]: [string, any]) => {
                types.push({
                    name,
                    properties: schema.properties || {},
                    required: schema.required || [],
                    type: schema.type || 'object',
                    description: schema.description || '',
                })
            }
        )

        // Group routes by tags (controllers)
        const tagGroups = new Map<string, any[]>()
        routes.forEach((route) => {
            route.tags.forEach((tag: string) => {
                if (!tagGroups.has(tag)) {
                    tagGroups.set(tag, [])
                }
                tagGroups.get(tag)!.push(route)
            })
        })

        // Create controllers from tag groups
        tagGroups.forEach((tagRoutes, tag) => {
            controllers.push({
                name: `${tag}Controller`,
                routes: tagRoutes,
                framework: 'nestjs',
                filePath: `src/${tag}/${tag}.controller.ts`,
            })
        })

        return {
            framework: 'nestjs',
            routes,
            controllers,
            services,
            types,
            metadata: {
                totalRoutes: routes.length,
                totalControllers: controllers.length,
                totalServices: services.length,
                totalTypes: types.length,
                analysisTime: 0,
                source: 'openapi',
            },
        }
    }

    private extractParameters(parameters: any[]): any[] {
        return parameters.map((param) => ({
            name: param.name,
            type: param.schema?.type || 'string',
            optional: !param.required,
            decorator:
                param.in === 'path'
                    ? 'Param'
                    : param.in === 'query'
                    ? 'Query'
                    : param.in === 'body'
                    ? 'Body'
                    : 'unknown',
            description: param.description || '',
        }))
    }

    // Method to get transformed data without AI processing (for chunked generation)
    getTransformedData(openApiSpecPath: string): any {
        const openApiSpec = JSON.parse(readFileSync(openApiSpecPath, 'utf-8'))
        return this.transformOpenApiToAIFormat(openApiSpec)
    }

    // Method to save the transformed data to a file
    saveTransformedData(openApiSpecPath: string, outputPath: string): void {
        const transformedData = this.getTransformedData(openApiSpecPath)
        const { writeFileSync } = require('fs')
        writeFileSync(outputPath, JSON.stringify(transformedData, null, 2))
    }
}
