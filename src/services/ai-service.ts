import { anthropic } from '@ai-sdk/anthropic'
import { google } from '@ai-sdk/google'
import { openai } from '@ai-sdk/openai'
import { generateText } from 'ai'
import { AIConfig } from '../config/config'
import { PromptTemplates } from '../utils/prompt-templates'

export class AIService {
    private config: AIConfig

    constructor(config: AIConfig) {
        this.config = config
    }

    async analyzeProject(analysisData: any): Promise<string> {
        const prompt = this.buildPrompt(analysisData)
        return this.generateDocumentation(prompt)
    }

    async generateDocumentation(prompt: string): Promise<string> {
        const model = this.createModel()

        try {
            console.log('üîç Sending request to AI...')

            const result = await generateText({
                model: model as any,
                prompt,
                temperature: this.config.temperature || 0.7,
                maxTokens: this.config.maxTokens || 4000,
            })

            console.log('‚úÖ AI response received')
            console.log(
                `üìù Response length: ${result.text?.length || 0} characters`
            )

            if (!result.text) {
                console.log('‚ö†Ô∏è AI returned empty response')
                throw new Error('No text generated by AI')
            }

            return result.text
        } catch (error) {
            console.error('‚ùå AI Service Error:', error)
            throw new Error(
                `AI analysis failed: ${
                    error instanceof Error ? error.message : 'Unknown error'
                }`
            )
        }
    }

    private createModel() {
        const { provider, model, apiKey } = this.config

        switch (provider) {
            case 'google':
                // Google AI SDK expects GOOGLE_GENERATIVE_AI_API_KEY environment variable
                if (apiKey) {
                    process.env['GOOGLE_GENERATIVE_AI_API_KEY'] = apiKey
                }
                return google(model)
            case 'openai':
                // OpenAI SDK expects OPENAI_API_KEY environment variable
                if (apiKey) {
                    process.env['OPENAI_API_KEY'] = apiKey
                }
                return openai(model)
            case 'anthropic':
                // Anthropic SDK expects ANTHROPIC_API_KEY environment variable
                if (apiKey) {
                    process.env['ANTHROPIC_API_KEY'] = apiKey
                }
                return anthropic(model)
            default:
                throw new Error(`Unsupported AI provider: ${provider}`)
        }
    }

    private buildPrompt(analysisData: any): string {
        // Use custom prompt if provided in config
        if (this.config.customPrompt && this.config.customPrompt.trim()) {
            return PromptTemplates.buildPrompt(
                this.config.customPrompt,
                analysisData
            )
        }

        // Use default template
        const template = PromptTemplates.getDefaultTemplate()
        return PromptTemplates.buildPrompt(template, analysisData)
    }

    static getAvailableProviders(): string[] {
        return ['google', 'openai', 'anthropic']
    }

    static getAvailableModels(provider: string): string[] {
        switch (provider) {
            case 'google':
                return [
                    'gemini-2.5-flash',
                    'gemini-2.5-pro',
                    'gemini-1.5-flash',
                ]
            case 'openai':
                return ['gpt-4o', 'gpt-4o-mini', 'gpt-3.5-turbo']
            case 'anthropic':
                return ['claude-3-5-sonnet', 'claude-3-haiku', 'claude-3-opus']
            default:
                return []
        }
    }
}
